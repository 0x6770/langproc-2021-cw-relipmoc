## Token defination

Defined tokens

/* keyword */
/* used for basic requirements */
return                            T_RETURN
int                               T_INT
while                             T_WHILE
if                                T_IF
else                              T_ELSE
else[ ]if                         T_ELSEIF

/* more keywords for intermediate features */ 
for                               T_FOR
enum                              T_ENUM
switch                            T_SWITCH
break                             T_BREAK
continue                          T_CONTINUE

/* keyword used for advanced features */
double                            return T_DOUBLE
float                             return T_FLOAT
char                              return T_CHAR
unsigned                          return T_UNSIGNED
struct                            return T_STRUCT
typedef                           return T_TYPEDEF
sizeof                            return T_SIZEOF
[\n\t\r ]


/* calculation */
\+                                T_ADD
\*                                T_MUL
\^                                T_EXP
\-                                T_SUB
\/                                T_DIV
\%                                T_MOD
\&                                T_AND
\|                                T_OR
\~                                T_NOT
\>                                T_GREATER
\<                                T_LESS
\=\=                              T_EQUAL
\>\=                              T_GE
\<\=                              T_LE
\!\=                              T_NE
\&\&                              T_LAND
\|\|                              T_LOR
\!                                T_LNOT
\=                                T_ASSIGN
\{                                T_LB
\}                                T_RB
\(                                T_LBC
\)                                T_RBC
\[                                T_LBS
\]                                T_RBS
\;                                T_SEMI 
[_a-zA-Z]+[0-9_a-zA-Z]*           T_NAME


/* Number */
[0-9]+                            {yylval.number=strtod(yytext, 0);  return T_INT;}
#[a-zA-Z]+                         {yylval.string=new std::string(yytext);  return T_STRING;}
